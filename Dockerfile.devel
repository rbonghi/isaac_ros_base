# Copyright (c) 2022, NVIDIA CORPORATION. All rights reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.


ARG BASE_DIST
ARG CUDA_VERSION
FROM nvidia/cuda:${CUDA_VERSION}-devel-${BASE_DIST}

# L4T variables
ARG JETPACK=5.0.2
ARG L4T=35.1
ARG L4T_MINOR_VERSION=1.0
# OPENCV
ARG OPENCV_VERSION=4.5.0
# NVIDIA software
ARG TENSORRT_VERSION=8.4
ARG TRITON_VERSION=2.24.0

# Disable terminal interaction for apt
ENV DEBIAN_FRONTEND=noninteractive
ENV SHELL /bin/bash
SHELL ["/bin/bash", "-c"] 

# Fundamentals
RUN apt-get update && apt-get install -y \
        apt-transport-https \
        build-essential \
        cmake \
        curl \
        git \
        git-lfs \
        lsb-release \
        tar \
        unzip \
        wget \
        gnupg \
        gnupg2 \
        ca-certificates \
        libgoogle-glog-dev \
        software-properties-common \
        locales \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# upgrade cmake - https://stackoverflow.com/a/56690743
# this is needed to build some of the ROS2 packages
RUN wget -qO - https://apt.kitware.com/keys/kitware-archive-latest.asc | apt-key add - \
    && apt-add-repository "deb https://apt.kitware.com/ubuntu/ $(lsb_release -cs) main" \
    && apt-get update \
    && apt-get install -y --no-install-recommends --only-upgrade \
        cmake \
    && cmake --version \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Python basics
RUN apt-get update && apt-get install -y \
        python3 \
        python3-flake8 \
        python3-pip \
        python3-pytest-cov \
        python3-setuptools \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# remove other versions of Python3
# workaround for 'Could NOT find Python3 (missing: Python3_NumPy_INCLUDE_DIRS Development'
RUN apt purge -y python3.9 libpython3.9* || echo "python3.9 not found, skipping removal" && \
    ls -ll /usr/bin/python*

# Set Python3 as default
RUN update-alternatives --install /usr/bin/python python /usr/bin/python3 1

# Install additional packages needed for ROS2 dependencies
RUN apt-get update && apt-get install -y \
        python3-distutils \
        libboost-all-dev \
        libboost-dev \
        libpcl-dev \
        libode-dev \
        lcov \
        python3-zmq \
        libxaw7-dev \
        libgraphicsmagick++1-dev \
        graphicsmagick-libmagick-dev-compat \
        libceres-dev \
        libsuitesparse-dev \
        libncurses5-dev \
        libassimp-dev \
        libyaml-cpp-dev \
        libpcap-dev \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# sklearn dependencies
RUN apt-get update && apt-get install -y \
        gfortran \
        libatlas-base-dev \
        python3-scipy \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# sklearn Python dependencies
RUN python3 -m pip install -U \
    Cython \
    wheel

# Install sklearn
RUN python3 -m pip install -U \
    scikit-learn

########### Sources and main Jetson reopo ##################

COPY scripts/install_nvidia_sources.sh install_nvidia_sources.sh
RUN TERM=xterm bash install_nvidia_sources.sh ${L4T} \
    && rm install_nvidia_sources.sh

########### VPI & TensorRT #################################

RUN apt-get update \
    && apt-get install -y tensorrt libnvvpi2 vpi2-dev \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

ENV LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/opt/nvidia/vpi2/lib64"

############ TAO converter #################################

COPY tao /opt/nvidia/tao
RUN TERM=xterm bash /opt/nvidia/tao/install_tao.sh ${TENSORRT_VERSION} \
    && rm /opt/nvidia/tao/install_tao.sh

ENV PATH="${PATH}:/opt/nvidia/tao"

############ Tritonserver ##################################

COPY scripts/install_tritonserver.sh install_tritonserver.sh
RUN TERM=xterm bash install_tritonserver.sh ${TRITON_VERSION} ${JETPACK} \
    && rm install_tritonserver.sh

ENV LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/opt/tritonserver/lib"

############ OpenCV ########################################

COPY scripts/install_opencv.sh /opt/install_opencv.sh
RUN TERM=xterm bash /opt/install_opencv.sh ${OPENCV_VERSION} \
    && rm /opt/install_opencv.sh

############################################################

# PyTorch (NV CUDA edition)
# https://docs.nvidia.com/deeplearning/frameworks/install-pytorch-jetson-platform/index.html
RUN if [ "$(uname -m)" != "x86_64" ]; then \
        python3 -m pip install --no-cache \
            https://developer.download.nvidia.cn/compute/redist/jp/v50/pytorch/torch-1.13.0a0+340c4120.nv22.06-cp38-cp38-linux_aarch64.whl ; \
    fi

# Add MQTT binaries and libraries
RUN apt-add-repository ppa:mosquitto-dev/mosquitto-ppa \
    && apt-get update && apt-get install -y \
        mosquitto \
        mosquitto-clients \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Note: VPN cannot be on for pymongo download
RUN python3 -m pip install -U \
        pymongo \
        paho-mqtt
  
# Core dev libraries
RUN apt-get update && apt-get install -y \
        libasio-dev \
        libbullet-dev \
        libtinyxml2-dev \
        libcunit1-dev \
        libopencv-dev \
        python3-opencv \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# NPP library
#RUN apt-get update && apt-get install -y --no-install-recommends \
#        libnpp-dev-11-4 \
#&& rm -rf /var/lib/apt/lists/* \
#&& apt-get clean

# Upgrade libc to resolve vulnerabilities including CVE-2019-11477
RUN apt-get update && apt-get install -y --only-upgrade \
        linux-libc-dev \      
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Downgrade protobuf
RUN python3 -m pip install protobuf==3.20.1

############################################################

COPY scripts/entrypoint.sh /entrypoint.sh
ENTRYPOINT ["/entrypoint.sh"]
CMD ["bash"]