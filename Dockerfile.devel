# Copyright (c) 2022, NVIDIA CORPORATION. All rights reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

ARG BASE_DIST
ARG CUDA_VERSION
ARG OPENCV_VERSION
# Intra layer OpenCV
FROM rbonghi/isaac-ros-base:opencv-${OPENCV_VERSION} as opencv_builder

RUN cp /opt/opencv/build/OpenCV-*.tar.gz /OpenCV.tar.gz

FROM nvidia/cuda:${CUDA_VERSION}-devel-${BASE_DIST}

# L4T variables
ARG JETPACK=5.0.2
ARG L4T=35.1
ARG L4T_MINOR_VERSION=1.0
# NVIDIA software
ARG TENSORRT_VERSION=8.4
ARG TRITON_VERSION=2.24.0

# Disable terminal interaction for apt
ENV DEBIAN_FRONTEND=noninteractive
ENV SHELL /bin/bash
SHELL ["/bin/bash", "-c"]

# ROS2 Humble installation
# https://docs.ros.org/en/humble/Installation/Alternatives/Ubuntu-Development-Setup.html

# Fundamentals
RUN apt-get update && apt-get install -y \
        locales \
        software-properties-common \
        build-essential \
        cmake \
        git \
        git-lfs \
        wget \
        unzip \
        curl \
        gnupg \
        # Python requirements
        python3 \
        python3-pip \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# change the locale from POSIX to UTF-8
RUN locale-gen en_US en_US.UTF-8 && update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8
ENV LANG=en_US.UTF-8
ENV PYTHONIOENCODING=utf-8

# Set Python3 as default
RUN update-alternatives --install /usr/bin/python python /usr/bin/python3 1

# Python dependencies
RUN python3 -m pip install -U \
        numpy

########### Sources and main Jetson repo ###################

COPY scripts/variables.sh /variables.sh
COPY scripts/install_nvidia_sources.sh install_nvidia_sources.sh
RUN TERM=xterm bash install_nvidia_sources.sh ${L4T} \
    && rm install_nvidia_sources.sh

########### VPI & TensorRT #################################

RUN apt-get update \
    && apt-get install -y tensorrt libnvvpi2 vpi2-dev \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

ENV LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/opt/nvidia/vpi2/lib64"

############ TAO converter #################################

COPY tao /opt/nvidia/tao
RUN TERM=xterm bash /opt/nvidia/tao/install_tao.sh ${TENSORRT_VERSION} \
    && rm /opt/nvidia/tao/install_tao.sh

ENV PATH="${PATH}:/opt/nvidia/tao"

############ Tritonserver ##################################

COPY scripts/install_tritonserver.sh install_tritonserver.sh
RUN TERM=xterm bash install_tritonserver.sh ${TRITON_VERSION} ${JETPACK} \
    && rm install_tritonserver.sh

ENV LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/opt/tritonserver/lib"

############ OpenCV ########################################

# Load from OpenCV builder tar file
COPY --from=opencv_builder /OpenCV.tar.gz /opt/OpenCV.tar.gz
# Install OpenCV on system
COPY scripts/install_opencv.sh /opt/install_opencv.sh
RUN TERM=xterm bash /opt/install_opencv.sh ${OPENCV_VERSION} \
    && rm /opt/install_opencv.sh /opt/OpenCV.tar.gz

############################################################

COPY scripts/entrypoint.sh /entrypoint.sh
ENTRYPOINT ["/entrypoint.sh"]
CMD ["bash"]